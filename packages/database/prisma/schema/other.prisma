enum EmployeeStatus {
    ACTIVE
    INACTIVE
}

enum WeekDay {
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
    SATURDAY
    SUNDAY
}

model Company {
    id String @id @default(uuid())

    // Información general
    name               String
    nameId             String
    image              String
    companyDescription String
    availableDays      WeekDay[]
    phoneNumber        String
    mapsLocation       String
    startTime          String
    endTime            String
    pmamStart          String
    pmamEnd            String

    // Ubicaciones
    city       String?
    state      String?
    country    String?
    postalCode String?
    email      String?

    // Borrado lógico
    isDeleted Boolean   @default(false)
    deletedAt DateTime?
    deletedBy String? // ID del usuario que eliminó el registro

    // Relaciones
    employees         Employees[]
    services          Services[]
    users             User[]
    serviceCategories ServiceCategory[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([name])
    @@unique([email])
    @@map("company")
}

model Employees {
    id String @id @default(uuid())

    // Información general
    name        String
    phoneNumber String
    address     String
    status      EmployeeStatus @default(ACTIVE)

    // Borrado lógico
    isDeleted Boolean   @default(false)
    deletedAt DateTime?
    deletedBy String? // ID del usuario que eliminó el registro

    // Relaciones
    company      Company                @relation(fields: [companyId], references: [id])
    companyId    String
    availability EmployeeAvailability[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([phoneNumber])
    @@map("employees")
}

model EmployeeAvailability {
    id        String  @id @default(uuid())
    day       WeekDay
    available Boolean @default(true)
    startTime String?
    endTime   String?
    ampmStart String?
    ampmEnd   String?

    employee   Employees @relation(fields: [employeeId], references: [id])
    employeeId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("employee_availability")
}

model ServiceCategory {
    id   String @id @default(uuid())
    name String

    // Borrado lógico
    isDeleted Boolean   @default(false)
    deletedAt DateTime?
    deletedBy String? // ID del usuario que eliminó el registro

    // Relaciones
    company   Company    @relation(fields: [companyId], references: [id])
    companyId String
    services  Services[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Nombre único por empresa (no globalmente)
    @@unique([name, companyId])
    @@map("service_category")
}

model Services {
    id String @id @default(uuid())

    // Información general
    name          String
    price         Float
    modifiedPrice Float?
    duration      Int
    lastUse       DateTime?

    // Borrado lógico
    isDeleted Boolean   @default(false)
    deletedAt DateTime?
    deletedBy String? // ID del usuario que eliminó el registro

    // Relaciones
    company           Company          @relation(fields: [companyId], references: [id])
    companyId         String
    serviceCategory   ServiceCategory? @relation(fields: [serviceCategoryId], references: [id])
    serviceCategoryId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Nombre único por empresa
    @@unique([name, companyId])
    @@map("services")
}